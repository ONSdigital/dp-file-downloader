// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package testdata

import (
	"io"
	"net/http"
	"sync"
)

var (
	lockDownloaderMockDownload        sync.RWMutex
	lockDownloaderMockQueryParameters sync.RWMutex
	lockDownloaderMockType            sync.RWMutex
)

// DownloaderMock is a mock implementation of Downloader.
//
//     func TestSomethingThatUsesDownloader(t *testing.T) {
//
//         // make and configure a mocked Downloader
//         mockedDownloader := &DownloaderMock{
//             DownloadFunc: func(r *http.Request) (io.Reader, string, int, error) {
// 	               panic("TODO: mock out the Download method")
//             },
//             QueryParametersFunc: func() []string {
// 	               panic("TODO: mock out the QueryParameters method")
//             },
//             TypeFunc: func() string {
// 	               panic("TODO: mock out the Type method")
//             },
//         }
//
//         // TODO: use mockedDownloader in code that requires Downloader
//         //       and then make assertions.
//
//     }
type DownloaderMock struct {
	// DownloadFunc mocks the Download method.
	DownloadFunc func(r *http.Request) (io.ReadCloser, string, int, error)

	// QueryParametersFunc mocks the QueryParameters method.
	QueryParametersFunc func() []string

	// TypeFunc mocks the Type method.
	TypeFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Download holds details about calls to the Download method.
		Download []struct {
			// R is the r argument value.
			R *http.Request
		}
		// QueryParameters holds details about calls to the QueryParameters method.
		QueryParameters []struct {
		}
		// Type holds details about calls to the Type method.
		Type []struct {
		}
	}
}

// Download calls DownloadFunc.
func (mock *DownloaderMock) Download(r *http.Request) (io.ReadCloser, string, int, error) {
	if mock.DownloadFunc == nil {
		panic("moq: DownloaderMock.DownloadFunc is nil but Downloader.Download was just called")
	}
	callInfo := struct {
		R *http.Request
	}{
		R: r,
	}
	lockDownloaderMockDownload.Lock()
	mock.calls.Download = append(mock.calls.Download, callInfo)
	lockDownloaderMockDownload.Unlock()
	return mock.DownloadFunc(r)
}

// DownloadCalls gets all the calls that were made to Download.
// Check the length with:
//     len(mockedDownloader.DownloadCalls())
func (mock *DownloaderMock) DownloadCalls() []struct {
	R *http.Request
} {
	var calls []struct {
		R *http.Request
	}
	lockDownloaderMockDownload.RLock()
	calls = mock.calls.Download
	lockDownloaderMockDownload.RUnlock()
	return calls
}

// QueryParameters calls QueryParametersFunc.
func (mock *DownloaderMock) QueryParameters() []string {
	if mock.QueryParametersFunc == nil {
		panic("moq: DownloaderMock.QueryParametersFunc is nil but Downloader.QueryParameters was just called")
	}
	callInfo := struct {
	}{}
	lockDownloaderMockQueryParameters.Lock()
	mock.calls.QueryParameters = append(mock.calls.QueryParameters, callInfo)
	lockDownloaderMockQueryParameters.Unlock()
	return mock.QueryParametersFunc()
}

// QueryParametersCalls gets all the calls that were made to QueryParameters.
// Check the length with:
//     len(mockedDownloader.QueryParametersCalls())
func (mock *DownloaderMock) QueryParametersCalls() []struct {
} {
	var calls []struct {
	}
	lockDownloaderMockQueryParameters.RLock()
	calls = mock.calls.QueryParameters
	lockDownloaderMockQueryParameters.RUnlock()
	return calls
}

// Type calls TypeFunc.
func (mock *DownloaderMock) Type() string {
	if mock.TypeFunc == nil {
		panic("moq: DownloaderMock.TypeFunc is nil but Downloader.Type was just called")
	}
	callInfo := struct {
	}{}
	lockDownloaderMockType.Lock()
	mock.calls.Type = append(mock.calls.Type, callInfo)
	lockDownloaderMockType.Unlock()
	return mock.TypeFunc()
}

// TypeCalls gets all the calls that were made to Type.
// Check the length with:
//     len(mockedDownloader.TypeCalls())
func (mock *DownloaderMock) TypeCalls() []struct {
} {
	var calls []struct {
	}
	lockDownloaderMockType.RLock()
	calls = mock.calls.Type
	lockDownloaderMockType.RUnlock()
	return calls
}
