// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testdata

import (
	"context"
	"github.com/ONSdigital/dp-file-downloader/table"
	"net/http"
	"sync"
)

var (
	lockTableRendererClientMockPostBody sync.RWMutex
)

// Ensure, that TableRendererClientMock does implement table.TableRendererClient.
// If this is not the case, regenerate this file with moq.
var _ table.TableRendererClient = &TableRendererClientMock{}

// TableRendererClientMock is a mock implementation of table.TableRendererClient.
//
//     func TestSomethingThatUsesTableRendererClient(t *testing.T) {
//
//         // make and configure a mocked table.TableRendererClient
//         mockedTableRendererClient := &TableRendererClientMock{
//             PostBodyFunc: func(ctx context.Context, format string, body []byte) (*http.Response, error) {
// 	               panic("mock out the PostBody method")
//             },
//         }
//
//         // use mockedTableRendererClient in code that requires table.TableRendererClient
//         // and then make assertions.
//
//     }
type TableRendererClientMock struct {
	// PostBodyFunc mocks the PostBody method.
	PostBodyFunc func(ctx context.Context, format string, body []byte) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// PostBody holds details about calls to the PostBody method.
		PostBody []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Format is the format argument value.
			Format string
			// Body is the body argument value.
			Body []byte
		}
	}
}

// PostBody calls PostBodyFunc.
func (mock *TableRendererClientMock) PostBody(ctx context.Context, format string, body []byte) (*http.Response, error) {
	if mock.PostBodyFunc == nil {
		panic("TableRendererClientMock.PostBodyFunc: method is nil but TableRendererClient.PostBody was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Format string
		Body   []byte
	}{
		Ctx:    ctx,
		Format: format,
		Body:   body,
	}
	lockTableRendererClientMockPostBody.Lock()
	mock.calls.PostBody = append(mock.calls.PostBody, callInfo)
	lockTableRendererClientMockPostBody.Unlock()
	return mock.PostBodyFunc(ctx, format, body)
}

// PostBodyCalls gets all the calls that were made to PostBody.
// Check the length with:
//     len(mockedTableRendererClient.PostBodyCalls())
func (mock *TableRendererClientMock) PostBodyCalls() []struct {
	Ctx    context.Context
	Format string
	Body   []byte
} {
	var calls []struct {
		Ctx    context.Context
		Format string
		Body   []byte
	}
	lockTableRendererClientMockPostBody.RLock()
	calls = mock.calls.PostBody
	lockTableRendererClientMockPostBody.RUnlock()
	return calls
}
