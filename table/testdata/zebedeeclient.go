// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testdata

import (
	"context"
	"github.com/ONSdigital/dp-file-downloader/table"
	"sync"
)

var (
	lockZebedeeClientMockGetResourceBody sync.RWMutex
)

// Ensure, that ZebedeeClientMock does implement table.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ table.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of table.ZebedeeClient.
//
//     func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//         // make and configure a mocked table.ZebedeeClient
//         mockedZebedeeClient := &ZebedeeClientMock{
//             GetResourceBodyFunc: func(ctx context.Context, userAccessToken string, collectionID string, lang string, uri string) ([]byte, error) {
// 	               panic("mock out the GetResourceBody method")
//             },
//         }
//
//         // use mockedZebedeeClient in code that requires table.ZebedeeClient
//         // and then make assertions.
//
//     }
type ZebedeeClientMock struct {
	// GetResourceBodyFunc mocks the GetResourceBody method.
	GetResourceBodyFunc func(ctx context.Context, userAccessToken string, collectionID string, lang string, uri string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetResourceBody holds details about calls to the GetResourceBody method.
		GetResourceBody []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// URI is the uri argument value.
			URI string
		}
	}
}

// GetResourceBody calls GetResourceBodyFunc.
func (mock *ZebedeeClientMock) GetResourceBody(ctx context.Context, userAccessToken string, collectionID string, lang string, uri string) ([]byte, error) {
	if mock.GetResourceBodyFunc == nil {
		panic("ZebedeeClientMock.GetResourceBodyFunc: method is nil but ZebedeeClient.GetResourceBody was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
		URI             string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		CollectionID:    collectionID,
		Lang:            lang,
		URI:             uri,
	}
	lockZebedeeClientMockGetResourceBody.Lock()
	mock.calls.GetResourceBody = append(mock.calls.GetResourceBody, callInfo)
	lockZebedeeClientMockGetResourceBody.Unlock()
	return mock.GetResourceBodyFunc(ctx, userAccessToken, collectionID, lang, uri)
}

// GetResourceBodyCalls gets all the calls that were made to GetResourceBody.
// Check the length with:
//     len(mockedZebedeeClient.GetResourceBodyCalls())
func (mock *ZebedeeClientMock) GetResourceBodyCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	CollectionID    string
	Lang            string
	URI             string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
		URI             string
	}
	lockZebedeeClientMockGetResourceBody.RLock()
	calls = mock.calls.GetResourceBody
	lockZebedeeClientMockGetResourceBody.RUnlock()
	return calls
}
